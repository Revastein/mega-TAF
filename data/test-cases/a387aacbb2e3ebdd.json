{"uid":"a387aacbb2e3ebdd","name":"test_successful_login","fullName":"tests.test_smoke.TestShoppingFlow#test_successful_login","historyId":"998d1be53c4c8f04958c6b50b12efb35","time":{"start":1749417811128,"stop":1749417826620,"duration":15492},"descriptionHtml":"Успешный вход существующего пользователя<p></p><strong>Precondition:</strong><ol><li>Пользователь May May или Ivan Ivanov существует</li></ol><strong>Scenario:</strong><ol><li>Открыть форму авторизации</li><li>Ввести валидные логин/пароль<p></p><em>Expected result:</em><blockquote><ul><li>Пользователь авторизован</li></ul></blockquote></li></ol>","status":"failed","statusMessage":"AssertionError: Timeout 10s waiting for condition","statusTrace":"self = <tests.test_smoke.TestShoppingFlow object at 0x7fe08c595810>\nsite = <base.site_entry.Site object at 0x7fe08c566660>\ncredentials = {'password': '', 'username': ''}\n\n    def test_successful_login(self, site: Site, credentials):\n        allure_description(\n            test_case_title=\"Успешный вход существующего пользователя\",\n            preconditions=[\"Пользователь May May или Ivan Ivanov существует\"],\n            steps=[\n                {\"action\": \"Открыть форму авторизации\"},\n                {\n                    \"action\": \"Ввести валидные логин/пароль\",\n                    \"expected\": \"Пользователь авторизован\",\n                },\n            ],\n        )\n    \n        site.main_page.go_to_page()\n        site.main_page.login_dropdown.click()\n        site.main_page.login_button.click()\n    \n        site.main_page.login_form.login_field.clear_and_send_value(\n            credentials[\"username\"]\n        )\n        site.main_page.login_form.password_field.clear_and_send_value(\n            credentials[\"password\"]\n        )\n        site.main_page.login_form.submit_button.click()\n    \n>       with site.main_page.expected.step(\n            \"Пользователь должен залогиниться как May May или Ivan Ivanov\"\n        ):\n\ntests/test_smoke.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/contextlib.py:148: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <helpers.expected.Expected object at 0x7fe08c5670e0>\nstep_name = 'Пользователь должен залогиниться как May May или Ivan Ivanov'\ninclude_screenshot = True\n\n    @contextmanager\n    def step(self, step_name: str, include_screenshot=True):\n        self.include_screenshot = include_screenshot\n        try:\n            with allure.step(step_name):\n                yield self\n                if self.condition is not None and not self.condition():\n                    msg = (\n                        self.error_msg()\n                        if callable(self.error_msg)\n                        else self.error_msg or \"Condition failed\"\n                    )\n                    if self.include_screenshot:\n                        attach_screenshot(self.driver, \"Failure screenshot\")\n>                   raise AssertionError(msg)\nE                   AssertionError: Timeout 10s waiting for condition\n\nhelpers/expected.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"credentials","time":{"start":1749417810508,"stop":1749417810508,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"chrome_driver","time":{"start":1749417810508,"stop":1749417811127,"duration":619},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"site","time":{"start":1749417811127,"stop":1749417811127,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"descriptionHtml":"Успешный вход существующего пользователя<p></p><strong>Precondition:</strong><ol><li>Пользователь May May или Ivan Ivanov существует</li></ol><strong>Scenario:</strong><ol><li>Открыть форму авторизации</li><li>Ввести валидные логин/пароль<p></p><em>Expected result:</em><blockquote><ul><li>Пользователь авторизован</li></ul></blockquote></li></ol>","status":"failed","statusMessage":"AssertionError: Timeout 10s waiting for condition","statusTrace":"self = <tests.test_smoke.TestShoppingFlow object at 0x7fe08c595810>\nsite = <base.site_entry.Site object at 0x7fe08c566660>\ncredentials = {'password': '', 'username': ''}\n\n    def test_successful_login(self, site: Site, credentials):\n        allure_description(\n            test_case_title=\"Успешный вход существующего пользователя\",\n            preconditions=[\"Пользователь May May или Ivan Ivanov существует\"],\n            steps=[\n                {\"action\": \"Открыть форму авторизации\"},\n                {\n                    \"action\": \"Ввести валидные логин/пароль\",\n                    \"expected\": \"Пользователь авторизован\",\n                },\n            ],\n        )\n    \n        site.main_page.go_to_page()\n        site.main_page.login_dropdown.click()\n        site.main_page.login_button.click()\n    \n        site.main_page.login_form.login_field.clear_and_send_value(\n            credentials[\"username\"]\n        )\n        site.main_page.login_form.password_field.clear_and_send_value(\n            credentials[\"password\"]\n        )\n        site.main_page.login_form.submit_button.click()\n    \n>       with site.main_page.expected.step(\n            \"Пользователь должен залогиниться как May May или Ivan Ivanov\"\n        ):\n\ntests/test_smoke.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/contextlib.py:148: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <helpers.expected.Expected object at 0x7fe08c5670e0>\nstep_name = 'Пользователь должен залогиниться как May May или Ivan Ivanov'\ninclude_screenshot = True\n\n    @contextmanager\n    def step(self, step_name: str, include_screenshot=True):\n        self.include_screenshot = include_screenshot\n        try:\n            with allure.step(step_name):\n                yield self\n                if self.condition is not None and not self.condition():\n                    msg = (\n                        self.error_msg()\n                        if callable(self.error_msg)\n                        else self.error_msg or \"Condition failed\"\n                    )\n                    if self.include_screenshot:\n                        attach_screenshot(self.driver, \"Failure screenshot\")\n>                   raise AssertionError(msg)\nE                   AssertionError: Timeout 10s waiting for condition\n\nhelpers/expected.py:31: AssertionError","steps":[{"name":"Open https://mega.readyscript.ru/ page","time":{"start":1749417811128,"stop":1749417815216,"duration":4088},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Page https://mega.readyscript.ru/ is opened","time":{"start":1749417815216,"stop":1749417815220,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Пользователь должен залогиниться как May May или Ivan Ivanov","time":{"start":1749417816077,"stop":1749417826472,"duration":10395},"status":"failed","statusMessage":"AssertionError: Timeout 10s waiting for condition\n","statusTrace":"  File \"/taf/helpers/expected.py\", line 31, in step\n    raise AssertionError(msg)\n","steps":[],"attachments":[{"uid":"7287931ab63968df","name":"Failure screenshot","source":"7287931ab63968df.png","type":"image/png","size":334615}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"140784bf2b99c0aa","name":"Exception screenshot","source":"140784bf2b99c0aa.png","type":"image/png","size":334615},{"uid":"e1e3e973970e6089","name":"Traceback","source":"e1e3e973970e6089.txt","type":"text/plain","size":167},{"uid":"db59917270331c0a","name":"failure-screenshot","source":"db59917270331c0a.png","type":"image/png","size":334615}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"chrome_driver::0","time":{"start":1749417826804,"stop":1749417826880,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke"},{"name":"subSuite","value":"TestShoppingFlow"},{"name":"host","value":"b45c4739650d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a387aacbb2e3ebdd.json","parameterValues":[]}